import tkinter as tk
from tkinter import ttk
from tkinter import messagebox
import random
import string

class AdvancedPasswordGenerator:
    def __init__(self, root):
        self.root = root
        self.root.title("Advanced Password Generator")

        self.length_label = ttk.Label(root, text="Password Length:")
        self.length_label.grid(row=0, column=0, padx=10, pady=10)

        self.length_entry = ttk.Entry(root)
        self.length_entry.grid(row=0, column=1, padx=10, pady=10)

        self.complexity_label = ttk.Label(root, text="Password Complexity:")
        self.complexity_label.grid(row=1, column=0, padx=10, pady=10)

        self.complexity_var = tk.StringVar()
        self.complexity_var.set("Medium")
        self.complexity_menu = ttk.Combobox(root, textvariable=self.complexity_var, values=["Low", "Medium", "High"])
        self.complexity_menu.grid(row=1, column=1, padx=10, pady=10)

        self.generate_button = ttk.Button(root, text="Generate Password", command=self.generate_password)
        self.generate_button.grid(row=2, column=0, columnspan=2, pady=10)

        self.result_label = ttk.Label(root, text="")
        self.result_label.grid(row=3, column=0, columnspan=2, pady=10)

    def generate_password(self):
        try:
            length = int(self.length_entry.get())
            if length <= 0:
                messagebox.showerror("Error", "Password length must be a positive integer.")
                return

            complexity = self.complexity_var.get()
            password = self.generate_random_password(length, complexity)
            self.result_label.config(text=f"Generated Password: {password}")
        except ValueError:
            messagebox.showerror("Error", "Invalid input. Please enter a valid integer.")

    def generate_random_password(self, length, complexity):
        if complexity == "Low":
            characters = string.ascii_letters + string.digits
        elif complexity == "Medium":
            characters = string.ascii_letters + string.digits + string.punctuation
        else:
            characters = string.ascii_letters + string.digits + string.punctuation + string.ascii_letters.upper()

        return ''.join(random.choice(characters) for _ in range(length))

if __name__ == "__main__":
    root = tk.Tk()
    app = AdvancedPasswordGenerator(root)
    root.mainloop()
